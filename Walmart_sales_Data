CREATE DATABASE IF NOT EXISTS WalmartSalesData;

CREATE TABLE IF NOT EXISTS sales(
invoice_id VARCHAR(30) NOT NULL PRIMARY KEY,
branch VARCHAR(5) NOT NULL,
city VARCHAR(30) NOT NULL,
customer_type VARCHAR(30) NOT NULL, 
gender VARCHAR(10) NOT NULL,
product_line VARCHAR(100) NOT NULL,
unit_price DECIMAL(10, 2) NOT NULL, 
quantity INT NOT NULL,
VAT FLOAT(6, 4) NOT NULL,
total DECIMAL(12, 4) NOT NULL,
date DATETIME NOT NULL, 
time TIME NOT NULL,
payment_method VARCHAR(15) NOT NULL,
cogs DECIMAL(10, 2) NOT NULL,
gross_margin_percentage FLOAT(11, 9),
gross_income DECIMAL(12, 4),
rating FLOAT(2, 1)
);



----- Feature engineering -----

-- time_of_day

SELECT
	time,
    (CASE
		WHEN time BETWEEN "00:00:00" AND "12:00:00" THEN "Morning"
        WHEN time BETWEEN "12:01:00" AND "16:00:00" THEN "Afternoon"
        ELSE "Evening" END) AS time_of_day
FROM sales;

-- alternative query for time_of_day

SELECT
	time,
	IF(time BETWEEN "00:00:00" AND "12:00:00", "Morning",
    IF(time BETWEEN "12:01:00" AND "16:00:00", "Afternoon", "Evening")) AS time_of_day3
FROM sales;

-- Creating new columns and inserting data
ALTER TABLE sales ADD COLUMN time_of_day VARCHAR(20);

UPDATE sales
SET time_of_day = (CASE
		WHEN time BETWEEN "00:00:00" AND "12:00:00" THEN "Morning"
        WHEN time BETWEEN "12:01:00" AND "16:00:00" THEN "Afternoon"
        ELSE "Evening" END);


-- name_day
SELECT
	date,
    DAYNAME(date) AS name_day
FROM sales;

ALTER TABLE sales ADD COLUMN name_day VARCHAR(10);

UPDATE sales
SET name_day = DAYNAME(date);

-- name_month

SELECT
	date,
    MONTHNAME(date)
FROM sales;

ALTER TABLE sales ADD COLUMN name_month VARCHAR(10);

UPDATE sales
SET name_month = MONTHNAME(date);


----- Generic questions -----

-- How many unique cities?
SELECT
	COUNT(DISTINCT city)
FROM sales

-- How many branches?
SELECT
	COUNT(DISTINCT branch)
FROM sales

-- In which city is each branch?
SELECT
	DISTINCT branch, 
	city
FROM sales

----- Product questions -----

-- How many unique product lines does the data have?

SELECT COUNT(DISTINCT product_line)
	FROM sales
    
-- What is the most common payment method?
SELECT DISTINCT payment_method, COUNT(payment_method) as count
	FROM sales
GROUP BY
	payment_method
ORDER BY count DESC;

-- What is the most selling product line?
SELECT DISTINCT product_line, COUNT(quantity) as count
	FROM sales
GROUP BY
	product_line
ORDER BY count DESC;

-- What is the total revenue by month?
 SELECT name_month, SUM(total) AS sum
	FROM sales
GROUP BY
	name_month
ORDER BY sum DESC;
    
-- What month had the largest COGS?
 SELECT name_month, SUM(cogs) AS sum
	FROM sales
GROUP BY
	name_month
ORDER BY sum DESC;

-- What product line had the largest revenue?
SELECT DISTINCT product_line, SUM(total) as sum
	FROM sales
GROUP BY
	product_line
ORDER BY sum DESC;

-- Fetch each product line and add a column to those product line showing "Good", "Bad". Good if its greater than average sales
SELECT product_line, AVG(total) AS average,
	IF(AVG(total) > (SELECT AVG(total) FROM sales), "Bad", "Good")
	FROM sales
GROUP BY
	product_line;
    

-- Which branch sold more products than average product sold?
-- What is the most common product line by gender?
-- What is the average rating of each product line?
